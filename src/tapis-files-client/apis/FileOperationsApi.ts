// tslint:disable
/**
 * Tapis Files API
 * My API
 *
 * The version of the OpenAPI document: 0.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    FileListingResponse,
    FileStringResponse,
    FormDataContentDisposition,
} from '../models';

export interface DeleteRequest {
    systemId: string;
    path: string;
}

export interface InsertRequest {
    systemId: string;
    path: string;
    xMeta?: string;
    file?: FormDataContentDisposition;
}

export interface ListFilesRequest {
    systemId: string;
    path: string;
    limit?: number;
    offset?: number;
    meta?: boolean;
}

export interface RenameRequest {
    systemId: string;
    path: string;
    newName: string;
}

/**
 * no description
 */
export class FileOperationsApi extends BaseAPI {

    /**
     * Delete a file in {systemID} at path {path}.
     * Delete a file or folder
     */
    _delete = ({ systemId, path }: DeleteRequest): Observable<FileStringResponse> => {
        throwIfNullOrUndefined(systemId, '_delete');
        throwIfNullOrUndefined(path, '_delete');

        return this.request<FileStringResponse>({
            path: '/v3/files/ops/{systemId}/{path}'.replace('{systemId}', encodeURI(systemId)).replace('{path}', encodeURI(path)),
            method: 'DELETE',
        });
    };

    /**
     * The file will be added at the {path} independent of the original file name
     * Upload a file
     */
    insert = ({ systemId, path, xMeta, file }: InsertRequest): Observable<FileStringResponse> => {
        throwIfNullOrUndefined(systemId, 'insert');
        throwIfNullOrUndefined(path, 'insert');

        const headers: HttpHeaders = {
            ...(xMeta != null ? { 'x-meta': String(xMeta) } : undefined),
        };

        const formData = new FormData();
        if (file !== undefined) { formData.append('file', file as any); }

        return this.request<FileStringResponse>({
            path: '/v3/files/ops/{systemId}/{path}'.replace('{systemId}', encodeURI(systemId)).replace('{path}', encodeURI(path)),
            method: 'POST',
            headers,
            body: formData,
        });
    };

    /**
     * List files in a bucket
     * List files/objects in a storage system.
     */
    listFiles = ({ systemId, path, limit, offset, meta }: ListFilesRequest): Observable<FileListingResponse> => {
        throwIfNullOrUndefined(systemId, 'listFiles');
        throwIfNullOrUndefined(path, 'listFiles');

        const query: HttpQuery = {};

        if (limit != null) { query['limit'] = limit; }
        if (offset != null) { query['offset'] = offset; }
        if (meta != null) { query['meta'] = meta; }

        return this.request<FileListingResponse>({
            path: '/v3/files/ops/{systemId}/{path}'.replace('{systemId}', encodeURI(systemId)).replace('{path}', encodeURI(path)),
            method: 'GET',
            query,
        });
    };

    /**
     * Move/Rename a file in {systemID} at path {path}.
     * Rename a file or folder
     */
    rename = ({ systemId, path, newName }: RenameRequest): Observable<FileStringResponse> => {
        throwIfNullOrUndefined(systemId, 'rename');
        throwIfNullOrUndefined(path, 'rename');
        throwIfNullOrUndefined(newName, 'rename');

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'newName': newName,
        };

        return this.request<FileStringResponse>({
            path: '/v3/files/ops/{systemId}/{path}'.replace('{systemId}', encodeURI(systemId)).replace('{path}', encodeURI(path)),
            method: 'PUT',
            query,
        });
    };

}
