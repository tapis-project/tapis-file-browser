// tslint:disable
/**
 * Tapis Files API
 * My API
 *
 * The version of the OpenAPI document: 0.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    TapisResponse,
    TransferTaskRequest,
    TransferTaskResponse,
} from '../models';

export interface CancelTransferTaskRequest {
    transferTaskId: string;
}

export interface CreateTransferTaskRequest {
    transferTaskRequest: TransferTaskRequest;
}

export interface GetTransferTaskRequest {
    transferTaskId: string;
}

export interface GetTransferTaskHistoryRequest {
    transferTaskId: string;
}

/**
 * no description
 */
export class TransfersApi extends BaseAPI {

    /**
     * Stop/Cancel a transfer task
     */
    cancelTransferTask = ({ transferTaskId }: CancelTransferTaskRequest): Observable<TapisResponse> => {
        throwIfNullOrUndefined(transferTaskId, 'cancelTransferTask');

        return this.request<TapisResponse>({
            path: '/v3/files/transfers/{transferTaskId}'.replace('{transferTaskId}', encodeURI(transferTaskId)),
            method: 'DELETE',
        });
    };

    /**
     * This creates a background task which will transfer files into the storage system
     * Transfer data
     */
    createTransferTask = ({ transferTaskRequest }: CreateTransferTaskRequest): Observable<TransferTaskResponse> => {
        throwIfNullOrUndefined(transferTaskRequest, 'createTransferTask');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<TransferTaskResponse>({
            path: '/v3/files/transfers',
            method: 'POST',
            headers,
            body: transferTaskRequest,
        });
    };

    /**
     * Get a transfer task
     */
    getTransferTask = ({ transferTaskId }: GetTransferTaskRequest): Observable<TransferTaskResponse> => {
        throwIfNullOrUndefined(transferTaskId, 'getTransferTask');

        return this.request<TransferTaskResponse>({
            path: '/v3/files/transfers/{transferTaskId}'.replace('{transferTaskId}', encodeURI(transferTaskId)),
            method: 'GET',
        });
    };

    /**
     * Get history of a transfer task
     */
    getTransferTaskHistory = ({ transferTaskId }: GetTransferTaskHistoryRequest): Observable<TransferTaskResponse> => {
        throwIfNullOrUndefined(transferTaskId, 'getTransferTaskHistory');

        return this.request<TransferTaskResponse>({
            path: '/v3/files/transfers/{transferTaskId}/history'.replace('{transferTaskId}', encodeURI(transferTaskId)),
            method: 'GET',
        });
    };

}
