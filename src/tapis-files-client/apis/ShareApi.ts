// tslint:disable
/**
 * Tapis Files API
 * My API
 *
 * The version of the OpenAPI document: 0.0
 * Contact: cicsupport@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    ShareFileRequest,
    SharedFileObject,
} from '../models';

export interface ShareDeleteRequest {
    systemId: string;
    path: string;
}

export interface ShareFileRequestParams {
    systemId: string;
    path: string;
    shareFileRequest?: ShareFileRequest;
}

export interface ShareListRequest {
    systemId: string;
    path: string;
}

/**
 * no description
 */
export class ShareApi extends BaseAPI {

    /**
     * Removes any outstanding shares on a file resource. 
     * Revoke a shared file resource 
     */
    shareDelete = ({ systemId, path }: ShareDeleteRequest): Observable<SharedFileObject> => {
        throwIfNullOrUndefined(systemId, 'shareDelete');
        throwIfNullOrUndefined(path, 'shareDelete');

        return this.request<SharedFileObject>({
            path: '/v3/files/share/{systemId}/{path}'.replace('{systemId}', encodeURI(systemId)).replace('{path}', encodeURI(path)),
            method: 'DELETE',
        });
    };

    /**
     * Creates a link that is valid for the requested validity time for the given user for the resource in {systemId} at path {path} 
     * Grant temporary access to a file resource. 
     */
    shareFile = ({ systemId, path, shareFileRequest }: ShareFileRequestParams): Observable<SharedFileObject> => {
        throwIfNullOrUndefined(systemId, 'shareFile');
        throwIfNullOrUndefined(path, 'shareFile');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<SharedFileObject>({
            path: '/v3/files/share/{systemId}/{path}'.replace('{systemId}', encodeURI(systemId)).replace('{path}', encodeURI(path)),
            method: 'POST',
            headers,
            body: shareFileRequest,
        });
    };

    /**
     * List all shares on a given file resource. 
     * List the shares on a file resource. 
     */
    shareList = ({ systemId, path }: ShareListRequest): Observable<Array<SharedFileObject>> => {
        throwIfNullOrUndefined(systemId, 'shareList');
        throwIfNullOrUndefined(path, 'shareList');

        return this.request<Array<SharedFileObject>>({
            path: '/v3/files/share/{systemId}/{path}'.replace('{systemId}', encodeURI(systemId)).replace('{path}', encodeURI(path)),
            method: 'GET',
        });
    };

}
